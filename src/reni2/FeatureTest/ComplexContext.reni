systemdata:
{
    Memory:((0 type *(125)) mutable) instance();
    !mutable FreePointer: Memory array_reference mutable;
};

system:
{
    NewMemory: /\
    {
        result:(((^ elementType) * 1) array_reference mutable)
        instance(systemdata FreePointer enable_reinterpretation).
        initializer: ^ initializer.
		result(1) := initializer(1).
    }
    result
};

Text: /\
{
    value: ^.

    result:
    {
        !mix_in: data(^) := new_value /\ data(^).
        this: /!\ ^^.
        count: ^ count.

        data: system NewMemory
        (
            elementType: value(0) type.
            count: value count.
            initializer: /\ value(^)
        ).

        dump_print: /!\
        {
            !mutable position: count type instance(0);
            data(position) dump_print
        }.

        << : /\ concat(count: ^ count, data: ^).

        concat: /\
        Text
        {
            other: ^;
            count: this count + other count;

            !mix_in: /\ other data((^ - this count)enable_cut);
        }
    }
}
result;

dummy: '123456789';

(Text ('H') << 'allo' )dump_print

