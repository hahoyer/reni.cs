systemdata:
{
    Memory:((0 type *('100' to_number_of_base 64)) mutable) instance();
    !mutable FreePointer: Memory array_reference mutable;
};

repeat: /\ ^ while() then(^ body(), repeat(^));

system:
{
    MaxNumber8: /!\ '7f' to_number_of_base 16.
    MaxNumber16: /!\ '7fff' to_number_of_base 16.
    MaxNumber32: /!\ '7fffffff' to_number_of_base 16.
    MaxNumber64: /!\ '7fffffffffffffff' to_number_of_base 16.
    TextItemType: /!\ MaxNumber8 text_item type.

    NewMemory: /\
    {
        result:(((^ elementType) * 1) array_reference mutable)
        instance(systemdata FreePointer enable_reinterpretation).

        initializer: ^ initializer.
        count: ^ count.
        !mutable position: count type instance(0).

        repeat
        (
            while: /\ position < count,

            body: /\
            (
                result(position) := initializer(position),
                position :=(position + 1) enable_cut
            )
        ).

        systemdata FreePointer :=(systemdata FreePointer type)
        instance((result + count) mutable enable_reinterpretation)
    }
    result
};

Text: /\
{
    value: ^.

    result:
    {
        !mix_in: data(^) := new_value /\ data(^).
        this: ^^.
        count: ^ count.

        data: system NewMemory
        (
            elementType: value() type.
            count: value count.
            initializer: /\ value(^)
        ).

        dump_print: /!\
        {
            !mutable position: count type instance(0);

            repeat
            (
                while: /\ position < count,

                body: /\
                (
                    data(position) dump_print,
                    position :=(position + 1) enable_cut
                )
            )
        }.

        << : /\ concat(count: ^ count, data: ^).

        concat: /\
        Text
        {
            other: ^;
            count: this count + other count;

            !mix_in: /\ ^ < this count
            then this data(^)
            else other data(^ - this count);
        }
    }
}
result
