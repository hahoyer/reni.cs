systemdata:
{
    Memory:((0 type *('100' to_number_of_base 64)) mutable) instance();
    !mutable FreePointer: Memory array_reference mutable;
};

repeat: /\ ^ while() then(^ body(), repeat(^));

system:
{
    MaxNumber8: /!\ '7f' to_number_of_base 16.
    MaxNumber16: /!\ '7fff' to_number_of_base 16.
    MaxNumber32: /!\ '7fffffff' to_number_of_base 16.
    MaxNumber64: /!\ '7fffffffffffffff' to_number_of_base 16.
    TextItemType: /!\ MaxNumber8 text_item type.

    NewMemory: /\
    {
        result:(((^ elementType) * 1) array_reference mutable)
        instance(systemdata FreePointer enable_reinterpretation).

        initializer: ^ initializer.
        count: ^ count.
        !mutable position: count type instance(0).

        repeat
        (
            while: /\ position < count,

            body: /\
            (
                result item(position) := initializer(position),
                position :=(position + 1) enable_cut
            )
        ).

        systemdata FreePointer :=(systemdata FreePointer type)
        instance((result + count) mutable enable_reinterpretation)
    }
    result
};

Text:
{
    Create: /\
    {
        elementTypeOfArg: ^ type item.

        result:
        {
            ! mix_in : data item(^) := new_value /\ data item(^).
            this: ^^.
            count: ^ count.

            data: system NewMemory
            (
                elementType: elementTypeOfArg.
                count: this count.
                initializer: /\ data item(^)
            ).

            dump_print: /!\
            {
                !mutable position: count type instance(0);

                repeat
                (
                    while: /\ position < count,

                    body: /\
                    (
                        data(position) dump_print,
                        position :=(position + 1) enable_cut
                    )
                )
            }.

            << : /\ concat(count: ^ count, data: ^ data).

            concat: /\
            Create
            {
                other: ^;
                count: this count + other count;

                data: /\ ^ < this count
                then this data(^)
                else other data(^ - this count);
            }
        }
    }
    result
}
